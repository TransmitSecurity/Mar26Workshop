/* tslint:disable */
/* eslint-disable */
/**
 * Transmit Demo Server
 * A demo server exposing a set of APIs to create user flows.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddCartItemDto
 */
export interface AddCartItemDto {
    /**
     * 
     * @type {string}
     * @memberof AddCartItemDto
     */
    'productId': string;
    /**
     * 
     * @type {number}
     * @memberof AddCartItemDto
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface AuthenticateEmailOtpUserDto
 */
export interface AuthenticateEmailOtpUserDto {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateEmailOtpUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateEmailOtpUserDto
     */
    'passcode': string;
}
/**
 * 
 * @export
 * @interface AuthenticateEmailUserDto
 */
export interface AuthenticateEmailUserDto {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateEmailUserDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface AuthenticateOidcUserDto
 */
export interface AuthenticateOidcUserDto {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateOidcUserDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateOidcUserDto
     */
    'redirectUri': string;
}
/**
 * 
 * @export
 * @interface AuthenticatePasswordUserDto
 */
export interface AuthenticatePasswordUserDto {
    /**
     * 
     * @type {string}
     * @memberof AuthenticatePasswordUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatePasswordUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthenticatePhoneOtpUserDto
 */
export interface AuthenticatePhoneOtpUserDto {
    /**
     * 
     * @type {string}
     * @memberof AuthenticatePhoneOtpUserDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatePhoneOtpUserDto
     */
    'passcode': string;
}
/**
 * 
 * @export
 * @interface AuthenticatePhoneUserDto
 */
export interface AuthenticatePhoneUserDto {
    /**
     * 
     * @type {string}
     * @memberof AuthenticatePhoneUserDto
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface AuthenticateWebauthnUserDto
 */
export interface AuthenticateWebauthnUserDto {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateWebauthnUserDto
     */
    'webauthnEncodedResult': string;
}
/**
 * 
 * @export
 * @interface CartDto
 */
export interface CartDto {
    /**
     * 
     * @type {number}
     * @memberof CartDto
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof CartDto
     */
    'price': number;
    /**
     * 
     * @type {Array<CartItemWithProductDto>}
     * @memberof CartDto
     */
    'items': Array<CartItemWithProductDto>;
}
/**
 * 
 * @export
 * @interface CartItemWithProductDto
 */
export interface CartItemWithProductDto {
    /**
     * 
     * @type {string}
     * @memberof CartItemWithProductDto
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof CartItemWithProductDto
     */
    'productId': string;
    /**
     * 
     * @type {number}
     * @memberof CartItemWithProductDto
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof CartItemWithProductDto
     */
    'createdAt': string;
    /**
     * 
     * @type {ProductDto}
     * @memberof CartItemWithProductDto
     */
    'product': ProductDto;
}
/**
 * 
 * @export
 * @interface ClientIdResponseDto
 */
export interface ClientIdResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ClientIdResponseDto
     */
    'clientId': string;
}
/**
 * 
 * @export
 * @interface MessageSentDto
 */
export interface MessageSentDto {
    /**
     * 
     * @type {string}
     * @memberof MessageSentDto
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface OrderDto
 */
export interface OrderDto {
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<ProductOrderDto>}
     * @memberof OrderDto
     */
    'items': Array<ProductOrderDto>;
}
/**
 * 
 * @export
 * @interface OtpResponseDto
 */
export interface OtpResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof OtpResponseDto
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface ProductDto
 */
export interface ProductDto {
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'brand': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'image2': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'image3': string;
    /**
     * 
     * @type {number}
     * @memberof ProductDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface ProductOrderDto
 */
export interface ProductOrderDto {
    /**
     * 
     * @type {number}
     * @memberof ProductOrderDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProductOrderDto
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof ProductOrderDto
     */
    'orderId': number;
    /**
     * 
     * @type {string}
     * @memberof ProductOrderDto
     */
    'productId': string;
    /**
     * 
     * @type {number}
     * @memberof ProductOrderDto
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof ProductOrderDto
     */
    'createdAt': string;
    /**
     * 
     * @type {ProductDto}
     * @memberof ProductOrderDto
     */
    'product': ProductDto;
}
/**
 * 
 * @export
 * @interface RegisterGenericUserEmailDto
 */
export interface RegisterGenericUserEmailDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserEmailDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserEmailDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserEmailDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserEmailDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserEmailDto
     */
    'birthday'?: string;
    /**
     * 
     * @type {UserAddressUpdateDto}
     * @memberof RegisterGenericUserEmailDto
     */
    'address'?: UserAddressUpdateDto;
}
/**
 * 
 * @export
 * @interface RegisterGenericUserPasswordDto
 */
export interface RegisterGenericUserPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserPasswordDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserPasswordDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserPasswordDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserPasswordDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserPasswordDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserPasswordDto
     */
    'birthday'?: string;
    /**
     * 
     * @type {UserAddressUpdateDto}
     * @memberof RegisterGenericUserPasswordDto
     */
    'address'?: UserAddressUpdateDto;
}
/**
 * 
 * @export
 * @interface RegisterGenericUserPhoneDto
 */
export interface RegisterGenericUserPhoneDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserPhoneDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserPhoneDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserPhoneDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserPhoneDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterGenericUserPhoneDto
     */
    'birthday'?: string;
    /**
     * 
     * @type {UserAddressUpdateDto}
     * @memberof RegisterGenericUserPhoneDto
     */
    'address'?: UserAddressUpdateDto;
}
/**
 * 
 * @export
 * @interface RemoveCartItemDto
 */
export interface RemoveCartItemDto {
    /**
     * 
     * @type {string}
     * @memberof RemoveCartItemDto
     */
    'productId': string;
}
/**
 * 
 * @export
 * @interface SendOtpResponseDto
 */
export interface SendOtpResponseDto {
    /**
     * 
     * @type {object}
     * @memberof SendOtpResponseDto
     */
    'approval_data'?: object;
    /**
     * 
     * @type {string}
     * @memberof SendOtpResponseDto
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface TestUserEmailDto
 */
export interface TestUserEmailDto {
    /**
     * 
     * @type {string}
     * @memberof TestUserEmailDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateGenericUserDto
 */
export interface UpdateGenericUserDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateGenericUserDto
     */
    'secondary_emails'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateGenericUserDto
     */
    'secondary_phone_numbers'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateGenericUserDto
     */
    'birthday'?: string;
    /**
     * 
     * @type {UserAddressUpdateDto}
     * @memberof UpdateGenericUserDto
     */
    'address'?: UserAddressUpdateDto;
    /**
     * 
     * @type {UserNameDto}
     * @memberof UpdateGenericUserDto
     */
    'name'?: UserNameDto;
}
/**
 * 
 * @export
 * @interface UpdatePasswordUserDto
 */
export interface UpdatePasswordUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordUserDto
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface UrlDto
 */
export interface UrlDto {
    /**
     * 
     * @type {string}
     * @memberof UrlDto
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface UserAddressDto
 */
export interface UserAddressDto {
    /**
     * 
     * @type {string}
     * @memberof UserAddressDto
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddressDto
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddressDto
     */
    'postal_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddressDto
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddressDto
     */
    'street_address'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserAddressDto
     */
    'updated_at'?: number;
}
/**
 * 
 * @export
 * @interface UserAddressUpdateDto
 */
export interface UserAddressUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof UserAddressUpdateDto
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddressUpdateDto
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddressUpdateDto
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddressUpdateDto
     */
    'street_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddressUpdateDto
     */
    'postal_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddressUpdateDto
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {UserEmailDto}
     * @memberof UserDto
     */
    'email'?: UserEmailDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    'secondary_emails'?: Array<string>;
    /**
     * 
     * @type {UserPhoneDto}
     * @memberof UserDto
     */
    'phone_number'?: UserPhoneDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    'secondary_phone_numbers'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'birthday'?: string;
    /**
     * 
     * @type {UserAddressDto}
     * @memberof UserDto
     */
    'address'?: UserAddressDto;
    /**
     * 
     * @type {UserNameDto}
     * @memberof UserDto
     */
    'name'?: UserNameDto;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'status_changed_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'created_at': number;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'updated_at': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    'identity_providers'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    'identities'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'last_auth'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'external_account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'app_name'?: string;
    /**
     * 
     * @type {object}
     * @memberof UserDto
     */
    'custom_app_data'?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    'groupIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'picture'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'language'?: string;
    /**
     * 
     * @type {object}
     * @memberof UserDto
     */
    'custom_data'?: object;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'external_user_id'?: string;
    /**
     * 
     * @type {UserPasswordInformationDto}
     * @memberof UserDto
     */
    'password_information'?: UserPasswordInformationDto;
}
/**
 * 
 * @export
 * @interface UserEmailDto
 */
export interface UserEmailDto {
    /**
     * 
     * @type {string}
     * @memberof UserEmailDto
     */
    'value': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserEmailDto
     */
    'email_verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserEmailDto
     */
    'verified_at'?: string;
}
/**
 * 
 * @export
 * @interface UserLoginInfoDto
 */
export interface UserLoginInfoDto {
    /**
     * 
     * @type {boolean}
     * @memberof UserLoginInfoDto
     */
    'webauthn': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserLoginInfoDto
     */
    'exists': boolean;
}
/**
 * 
 * @export
 * @interface UserNameDto
 */
export interface UserNameDto {
    /**
     * 
     * @type {string}
     * @memberof UserNameDto
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserNameDto
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserNameDto
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserNameDto
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface UserPasswordInformationDto
 */
export interface UserPasswordInformationDto {
    /**
     * 
     * @type {boolean}
     * @memberof UserPasswordInformationDto
     */
    'expired': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserPasswordInformationDto
     */
    'temporary': boolean;
    /**
     * 
     * @type {number}
     * @memberof UserPasswordInformationDto
     */
    'updated_at': number;
}
/**
 * 
 * @export
 * @interface UserPhoneDto
 */
export interface UserPhoneDto {
    /**
     * 
     * @type {string}
     * @memberof UserPhoneDto
     */
    'value': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserPhoneDto
     */
    'phone_number_verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserPhoneDto
     */
    'verified_at'?: string;
}
/**
 * 
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
    /**
     * 
     * @type {UserDto}
     * @memberof UserResponseDto
     */
    'userData': UserDto;
    /**
     * 
     * @type {object}
     * @memberof UserResponseDto
     */
    'riskRecommendation'?: object;
}
/**
 * 
 * @export
 * @interface VerifyEmailDto
 */
export interface VerifyEmailDto {
    /**
     * 
     * @type {string}
     * @memberof VerifyEmailDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface VerifyEmailOtpDto
 */
export interface VerifyEmailOtpDto {
    /**
     * 
     * @type {string}
     * @memberof VerifyEmailOtpDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof VerifyEmailOtpDto
     */
    'otp': string;
}
/**
 * 
 * @export
 * @interface VerifyPhoneDto
 */
export interface VerifyPhoneDto {
    /**
     * 
     * @type {string}
     * @memberof VerifyPhoneDto
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface VerifyPhoneOtpDto
 */
export interface VerifyPhoneOtpDto {
    /**
     * 
     * @type {string}
     * @memberof VerifyPhoneOtpDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof VerifyPhoneOtpDto
     */
    'otp': string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Send an email OTP
         * @param {AuthenticateEmailUserDto} authenticateEmailUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateEmailOtpSend: async (authenticateEmailUserDto: AuthenticateEmailUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticateEmailUserDto' is not null or undefined
            assertParamExists('authenticateEmailOtpSend', 'authenticateEmailUserDto', authenticateEmailUserDto)
            const localVarPath = `/generic/authentication/otp/email/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticateEmailUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate an email OTP
         * @param {AuthenticateEmailOtpUserDto} authenticateEmailOtpUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateEmailOtpValidate: async (authenticateEmailOtpUserDto: AuthenticateEmailOtpUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticateEmailOtpUserDto' is not null or undefined
            assertParamExists('authenticateEmailOtpValidate', 'authenticateEmailOtpUserDto', authenticateEmailOtpUserDto)
            const localVarPath = `/generic/authentication/otp/email/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticateEmailOtpUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login with an authorization code
         * @param {AuthenticateOidcUserDto} authenticateOidcUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateOidc: async (authenticateOidcUserDto: AuthenticateOidcUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticateOidcUserDto' is not null or undefined
            assertParamExists('authenticateOidc', 'authenticateOidcUserDto', authenticateOidcUserDto)
            const localVarPath = `/generic/authentication/oidc/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticateOidcUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login with password
         * @param {AuthenticatePasswordUserDto} authenticatePasswordUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticatePassword: async (authenticatePasswordUserDto: AuthenticatePasswordUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticatePasswordUserDto' is not null or undefined
            assertParamExists('authenticatePassword', 'authenticatePasswordUserDto', authenticatePasswordUserDto)
            const localVarPath = `/generic/authentication/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticatePasswordUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send an SMS OTP
         * @param {AuthenticatePhoneUserDto} authenticatePhoneUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateSMSOtpSend: async (authenticatePhoneUserDto: AuthenticatePhoneUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticatePhoneUserDto' is not null or undefined
            assertParamExists('authenticateSMSOtpSend', 'authenticatePhoneUserDto', authenticatePhoneUserDto)
            const localVarPath = `/generic/authentication/otp/sms/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticatePhoneUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate an SMS OTP
         * @param {AuthenticatePhoneOtpUserDto} authenticatePhoneOtpUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateSmsOtpValidate: async (authenticatePhoneOtpUserDto: AuthenticatePhoneOtpUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticatePhoneOtpUserDto' is not null or undefined
            assertParamExists('authenticateSmsOtpValidate', 'authenticatePhoneOtpUserDto', authenticatePhoneOtpUserDto)
            const localVarPath = `/generic/authentication/otp/sms/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticatePhoneOtpUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login with webauthn
         * @param {AuthenticateWebauthnUserDto} authenticateWebauthnUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateWebauthn: async (authenticateWebauthnUserDto: AuthenticateWebauthnUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticateWebauthnUserDto' is not null or undefined
            assertParamExists('authenticateWebauthn', 'authenticateWebauthnUserDto', authenticateWebauthnUserDto)
            const localVarPath = `/generic/authentication/webauthn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticateWebauthnUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the authorization request URL
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationRequestOidc: async (redirectUri: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'redirectUri' is not null or undefined
            assertParamExists('authorizationRequestOidc', 'redirectUri', redirectUri)
            const localVarPath = `/generic/authentication/oidc/authorization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Send an email OTP
         * @param {AuthenticateEmailUserDto} authenticateEmailUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateEmailOtpSend(authenticateEmailUserDto: AuthenticateEmailUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendOtpResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateEmailOtpSend(authenticateEmailUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Validate an email OTP
         * @param {AuthenticateEmailOtpUserDto} authenticateEmailOtpUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateEmailOtpValidate(authenticateEmailOtpUserDto: AuthenticateEmailOtpUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateEmailOtpValidate(authenticateEmailOtpUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login with an authorization code
         * @param {AuthenticateOidcUserDto} authenticateOidcUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateOidc(authenticateOidcUserDto: AuthenticateOidcUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateOidc(authenticateOidcUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login with password
         * @param {AuthenticatePasswordUserDto} authenticatePasswordUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticatePassword(authenticatePasswordUserDto: AuthenticatePasswordUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticatePassword(authenticatePasswordUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send an SMS OTP
         * @param {AuthenticatePhoneUserDto} authenticatePhoneUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateSMSOtpSend(authenticatePhoneUserDto: AuthenticatePhoneUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendOtpResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateSMSOtpSend(authenticatePhoneUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Validate an SMS OTP
         * @param {AuthenticatePhoneOtpUserDto} authenticatePhoneOtpUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateSmsOtpValidate(authenticatePhoneOtpUserDto: AuthenticatePhoneOtpUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateSmsOtpValidate(authenticatePhoneOtpUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login with webauthn
         * @param {AuthenticateWebauthnUserDto} authenticateWebauthnUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateWebauthn(authenticateWebauthnUserDto: AuthenticateWebauthnUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateWebauthn(authenticateWebauthnUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the authorization request URL
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizationRequestOidc(redirectUri: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizationRequestOidc(redirectUri, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Send an email OTP
         * @param {AuthenticateEmailUserDto} authenticateEmailUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateEmailOtpSend(authenticateEmailUserDto: AuthenticateEmailUserDto, options?: any): AxiosPromise<SendOtpResponseDto> {
            return localVarFp.authenticateEmailOtpSend(authenticateEmailUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate an email OTP
         * @param {AuthenticateEmailOtpUserDto} authenticateEmailOtpUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateEmailOtpValidate(authenticateEmailOtpUserDto: AuthenticateEmailOtpUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.authenticateEmailOtpValidate(authenticateEmailOtpUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login with an authorization code
         * @param {AuthenticateOidcUserDto} authenticateOidcUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateOidc(authenticateOidcUserDto: AuthenticateOidcUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.authenticateOidc(authenticateOidcUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login with password
         * @param {AuthenticatePasswordUserDto} authenticatePasswordUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticatePassword(authenticatePasswordUserDto: AuthenticatePasswordUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.authenticatePassword(authenticatePasswordUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send an SMS OTP
         * @param {AuthenticatePhoneUserDto} authenticatePhoneUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateSMSOtpSend(authenticatePhoneUserDto: AuthenticatePhoneUserDto, options?: any): AxiosPromise<SendOtpResponseDto> {
            return localVarFp.authenticateSMSOtpSend(authenticatePhoneUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate an SMS OTP
         * @param {AuthenticatePhoneOtpUserDto} authenticatePhoneOtpUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateSmsOtpValidate(authenticatePhoneOtpUserDto: AuthenticatePhoneOtpUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.authenticateSmsOtpValidate(authenticatePhoneOtpUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login with webauthn
         * @param {AuthenticateWebauthnUserDto} authenticateWebauthnUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateWebauthn(authenticateWebauthnUserDto: AuthenticateWebauthnUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.authenticateWebauthn(authenticateWebauthnUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the authorization request URL
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationRequestOidc(redirectUri: string, options?: any): AxiosPromise<UrlDto> {
            return localVarFp.authorizationRequestOidc(redirectUri, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Send an email OTP
     * @param {AuthenticateEmailUserDto} authenticateEmailUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticateEmailOtpSend(authenticateEmailUserDto: AuthenticateEmailUserDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticateEmailOtpSend(authenticateEmailUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate an email OTP
     * @param {AuthenticateEmailOtpUserDto} authenticateEmailOtpUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticateEmailOtpValidate(authenticateEmailOtpUserDto: AuthenticateEmailOtpUserDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticateEmailOtpValidate(authenticateEmailOtpUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login with an authorization code
     * @param {AuthenticateOidcUserDto} authenticateOidcUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticateOidc(authenticateOidcUserDto: AuthenticateOidcUserDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticateOidc(authenticateOidcUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login with password
     * @param {AuthenticatePasswordUserDto} authenticatePasswordUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticatePassword(authenticatePasswordUserDto: AuthenticatePasswordUserDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticatePassword(authenticatePasswordUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send an SMS OTP
     * @param {AuthenticatePhoneUserDto} authenticatePhoneUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticateSMSOtpSend(authenticatePhoneUserDto: AuthenticatePhoneUserDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticateSMSOtpSend(authenticatePhoneUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate an SMS OTP
     * @param {AuthenticatePhoneOtpUserDto} authenticatePhoneOtpUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticateSmsOtpValidate(authenticatePhoneOtpUserDto: AuthenticatePhoneOtpUserDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticateSmsOtpValidate(authenticatePhoneOtpUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login with webauthn
     * @param {AuthenticateWebauthnUserDto} authenticateWebauthnUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticateWebauthn(authenticateWebauthnUserDto: AuthenticateWebauthnUserDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticateWebauthn(authenticateWebauthnUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the authorization request URL
     * @param {string} redirectUri 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authorizationRequestOidc(redirectUri: string, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authorizationRequestOidc(redirectUri, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CartApi - axios parameter creator
 * @export
 */
export const CartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add an item to the cart
         * @param {AddCartItemDto} addCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCart: async (addCartItemDto: AddCartItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addCartItemDto' is not null or undefined
            assertParamExists('addToCart', 'addCartItemDto', addCartItemDto)
            const localVarPath = `/shop/cart/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addCartItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete all items in the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCart: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shop/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an order from the existing cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrderFromCart: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shop/cart/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete one item in the cart
         * @param {RemoveCartItemDto} removeCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFromCart: async (removeCartItemDto: RemoveCartItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'removeCartItemDto' is not null or undefined
            assertParamExists('deleteFromCart', 'removeCartItemDto', removeCartItemDto)
            const localVarPath = `/shop/cart/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeCartItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the cart and its metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shop/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Decrease the quantity of on item by one in the cart
         * @param {RemoveCartItemDto} removeCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCart: async (removeCartItemDto: RemoveCartItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'removeCartItemDto' is not null or undefined
            assertParamExists('removeFromCart', 'removeCartItemDto', removeCartItemDto)
            const localVarPath = `/shop/cart/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeCartItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartApi - functional programming interface
 * @export
 */
export const CartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add an item to the cart
         * @param {AddCartItemDto} addCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCart(addCartItemDto: AddCartItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartItemWithProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToCart(addCartItemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete all items in the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearCart(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearCart(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create an order from the existing cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrderFromCart(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrderFromCart(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete one item in the cart
         * @param {RemoveCartItemDto} removeCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFromCart(removeCartItemDto: RemoveCartItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFromCart(removeCartItemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the cart and its metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCart(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCart(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Decrease the quantity of on item by one in the cart
         * @param {RemoveCartItemDto} removeCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromCart(removeCartItemDto: RemoveCartItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromCart(removeCartItemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CartApi - factory interface
 * @export
 */
export const CartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartApiFp(configuration)
    return {
        /**
         * 
         * @summary Add an item to the cart
         * @param {AddCartItemDto} addCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCart(addCartItemDto: AddCartItemDto, options?: any): AxiosPromise<CartItemWithProductDto> {
            return localVarFp.addToCart(addCartItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete all items in the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCart(options?: any): AxiosPromise<void> {
            return localVarFp.clearCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an order from the existing cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrderFromCart(options?: any): AxiosPromise<number> {
            return localVarFp.createOrderFromCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete one item in the cart
         * @param {RemoveCartItemDto} removeCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFromCart(removeCartItemDto: RemoveCartItemDto, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFromCart(removeCartItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the cart and its metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(options?: any): AxiosPromise<CartDto> {
            return localVarFp.getCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Decrease the quantity of on item by one in the cart
         * @param {RemoveCartItemDto} removeCartItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCart(removeCartItemDto: RemoveCartItemDto, options?: any): AxiosPromise<void> {
            return localVarFp.removeFromCart(removeCartItemDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartApi - object-oriented interface
 * @export
 * @class CartApi
 * @extends {BaseAPI}
 */
export class CartApi extends BaseAPI {
    /**
     * 
     * @summary Add an item to the cart
     * @param {AddCartItemDto} addCartItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public addToCart(addCartItemDto: AddCartItemDto, options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).addToCart(addCartItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete all items in the cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public clearCart(options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).clearCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create an order from the existing cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public createOrderFromCart(options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).createOrderFromCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete one item in the cart
     * @param {RemoveCartItemDto} removeCartItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public deleteFromCart(removeCartItemDto: RemoveCartItemDto, options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).deleteFromCart(removeCartItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the cart and its metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public getCart(options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).getCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Decrease the quantity of on item by one in the cart
     * @param {RemoveCartItemDto} removeCartItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public removeFromCart(removeCartItemDto: RemoveCartItemDto, options?: AxiosRequestConfig) {
        return CartApiFp(this.configuration).removeFromCart(removeCartItemDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ConfigApi - axios parameter creator
 * @export
 */
export const ConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the client id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientId: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/generic/config/clientId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigApi - functional programming interface
 * @export
 */
export const ConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the client id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientId(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientIdResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientId(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigApi - factory interface
 * @export
 */
export const ConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the client id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientId(options?: any): AxiosPromise<ClientIdResponseDto> {
            return localVarFp.getClientId(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export class ConfigApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the client id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public getClientId(options?: AxiosRequestConfig) {
        return ConfigApiFp(this.configuration).getClientId(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an order from the existing cart
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrder', 'id', id)
            const localVarPath = `/shop/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an order from the existing cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shop/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create an order from the existing cart
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create an order from the existing cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create an order from the existing cart
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(id: number, options?: any): AxiosPromise<OrderDto> {
            return localVarFp.getOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an order from the existing cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(options?: any): AxiosPromise<Array<OrderDto>> {
            return localVarFp.getOrders(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @summary Create an order from the existing cart
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrder(id: number, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create an order from the existing cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrders(options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getOrders(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Upload a draft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDraft: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/post`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a post
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePost', 'id', id)
            const localVarPath = `/post/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} searchString 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredPosts: async (searchString: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchString' is not null or undefined
            assertParamExists('getFilteredPosts', 'searchString', searchString)
            const localVarPath = `/post/search/{searchString}`
                .replace(`{${"searchString"}}`, encodeURIComponent(String(searchString)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPostById', 'id', id)
            const localVarPath = `/post/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedPosts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/post`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Publish a draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPost: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('publishPost', 'id', id)
            const localVarPath = `/post/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Upload a draft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDraft(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDraft(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a post
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} searchString 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilteredPosts(searchString: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFilteredPosts(searchString, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishedPosts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublishedPosts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Publish a draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishPost(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostApiFp(configuration)
    return {
        /**
         * 
         * @summary Upload a draft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDraft(options?: any): AxiosPromise<void> {
            return localVarFp.createDraft(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a post
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} searchString 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredPosts(searchString: string, options?: any): AxiosPromise<void> {
            return localVarFp.getFilteredPosts(searchString, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostById(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getPostById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedPosts(options?: any): AxiosPromise<void> {
            return localVarFp.getPublishedPosts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Publish a draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPost(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.publishPost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
    /**
     * 
     * @summary Upload a draft
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public createDraft(options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).createDraft(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a post
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public deletePost(id: string, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).deletePost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} searchString 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public getFilteredPosts(searchString: string, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).getFilteredPosts(searchString, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public getPostById(id: string, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).getPostById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public getPublishedPosts(options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).getPublishedPosts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Publish a draft
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public publishPost(id: string, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).publishPost(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a product from its id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductById', 'id', id)
            const localVarPath = `/shop/products/id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the products for multiple categories, comma separated
         * @param {string} categories 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByCategories: async (categories: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categories' is not null or undefined
            assertParamExists('getProductsByCategories', 'categories', categories)
            const localVarPath = `/shop/products/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categories !== undefined) {
                localVarQueryParameter['categories'] = categories;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the products for one category
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByCategory: async (category: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('getProductsByCategory', 'category', category)
            const localVarPath = `/shop/products/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a product from its id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the products for multiple categories, comma separated
         * @param {string} categories 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByCategories(categories: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductsByCategories(categories, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the products for one category
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByCategory(category: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductsByCategory(category, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a product from its id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(id: string, options?: any): AxiosPromise<ProductDto> {
            return localVarFp.getProductById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the products for multiple categories, comma separated
         * @param {string} categories 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByCategories(categories: string, options?: any): AxiosPromise<Array<ProductDto>> {
            return localVarFp.getProductsByCategories(categories, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the products for one category
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByCategory(category: string, options?: any): AxiosPromise<Array<ProductDto>> {
            return localVarFp.getProductsByCategory(category, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @summary Get a product from its id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductById(id: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProductById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the products for multiple categories, comma separated
     * @param {string} categories 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductsByCategories(categories: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProductsByCategories(categories, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the products for one category
     * @param {string} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductsByCategory(category: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProductsByCategory(category, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegistrationApi - axios parameter creator
 * @export
 */
export const RegistrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Activate webauthn
         * @param {AuthenticateWebauthnUserDto} authenticateWebauthnUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWebauthn: async (authenticateWebauthnUserDto: AuthenticateWebauthnUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticateWebauthnUserDto' is not null or undefined
            assertParamExists('registerWebauthn', 'authenticateWebauthnUserDto', authenticateWebauthnUserDto)
            const localVarPath = `/generic/registration/webauthn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticateWebauthnUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign up with email
         * @param {RegisterGenericUserEmailDto} registerGenericUserEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWithEmail: async (registerGenericUserEmailDto: RegisterGenericUserEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerGenericUserEmailDto' is not null or undefined
            assertParamExists('registerWithEmail', 'registerGenericUserEmailDto', registerGenericUserEmailDto)
            const localVarPath = `/generic/registration/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerGenericUserEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign up with password
         * @param {RegisterGenericUserPasswordDto} registerGenericUserPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWithPassword: async (registerGenericUserPasswordDto: RegisterGenericUserPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerGenericUserPasswordDto' is not null or undefined
            assertParamExists('registerWithPassword', 'registerGenericUserPasswordDto', registerGenericUserPasswordDto)
            const localVarPath = `/generic/registration/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerGenericUserPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign up with phone
         * @param {RegisterGenericUserPhoneDto} registerGenericUserPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWithPhone: async (registerGenericUserPhoneDto: RegisterGenericUserPhoneDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerGenericUserPhoneDto' is not null or undefined
            assertParamExists('registerWithPhone', 'registerGenericUserPhoneDto', registerGenericUserPhoneDto)
            const localVarPath = `/generic/registration/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerGenericUserPhoneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrationApi - functional programming interface
 * @export
 */
export const RegistrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Activate webauthn
         * @param {AuthenticateWebauthnUserDto} authenticateWebauthnUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerWebauthn(authenticateWebauthnUserDto: AuthenticateWebauthnUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendOtpResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerWebauthn(authenticateWebauthnUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign up with email
         * @param {RegisterGenericUserEmailDto} registerGenericUserEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerWithEmail(registerGenericUserEmailDto: RegisterGenericUserEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendOtpResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerWithEmail(registerGenericUserEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign up with password
         * @param {RegisterGenericUserPasswordDto} registerGenericUserPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerWithPassword(registerGenericUserPasswordDto: RegisterGenericUserPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerWithPassword(registerGenericUserPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign up with phone
         * @param {RegisterGenericUserPhoneDto} registerGenericUserPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerWithPhone(registerGenericUserPhoneDto: RegisterGenericUserPhoneDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendOtpResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerWithPhone(registerGenericUserPhoneDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegistrationApi - factory interface
 * @export
 */
export const RegistrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Activate webauthn
         * @param {AuthenticateWebauthnUserDto} authenticateWebauthnUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWebauthn(authenticateWebauthnUserDto: AuthenticateWebauthnUserDto, options?: any): AxiosPromise<SendOtpResponseDto> {
            return localVarFp.registerWebauthn(authenticateWebauthnUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign up with email
         * @param {RegisterGenericUserEmailDto} registerGenericUserEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWithEmail(registerGenericUserEmailDto: RegisterGenericUserEmailDto, options?: any): AxiosPromise<SendOtpResponseDto> {
            return localVarFp.registerWithEmail(registerGenericUserEmailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign up with password
         * @param {RegisterGenericUserPasswordDto} registerGenericUserPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWithPassword(registerGenericUserPasswordDto: RegisterGenericUserPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.registerWithPassword(registerGenericUserPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign up with phone
         * @param {RegisterGenericUserPhoneDto} registerGenericUserPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerWithPhone(registerGenericUserPhoneDto: RegisterGenericUserPhoneDto, options?: any): AxiosPromise<SendOtpResponseDto> {
            return localVarFp.registerWithPhone(registerGenericUserPhoneDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistrationApi - object-oriented interface
 * @export
 * @class RegistrationApi
 * @extends {BaseAPI}
 */
export class RegistrationApi extends BaseAPI {
    /**
     * 
     * @summary Activate webauthn
     * @param {AuthenticateWebauthnUserDto} authenticateWebauthnUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationApi
     */
    public registerWebauthn(authenticateWebauthnUserDto: AuthenticateWebauthnUserDto, options?: AxiosRequestConfig) {
        return RegistrationApiFp(this.configuration).registerWebauthn(authenticateWebauthnUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign up with email
     * @param {RegisterGenericUserEmailDto} registerGenericUserEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationApi
     */
    public registerWithEmail(registerGenericUserEmailDto: RegisterGenericUserEmailDto, options?: AxiosRequestConfig) {
        return RegistrationApiFp(this.configuration).registerWithEmail(registerGenericUserEmailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign up with password
     * @param {RegisterGenericUserPasswordDto} registerGenericUserPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationApi
     */
    public registerWithPassword(registerGenericUserPasswordDto: RegisterGenericUserPasswordDto, options?: AxiosRequestConfig) {
        return RegistrationApiFp(this.configuration).registerWithPassword(registerGenericUserPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign up with phone
     * @param {RegisterGenericUserPhoneDto} registerGenericUserPhoneDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationApi
     */
    public registerWithPhone(registerGenericUserPhoneDto: RegisterGenericUserPhoneDto, options?: AxiosRequestConfig) {
        return RegistrationApiFp(this.configuration).registerWithPhone(registerGenericUserPhoneDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the authorization request URL
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationRequestOidc: async (redirectUri: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'redirectUri' is not null or undefined
            assertParamExists('authorizationRequestOidc', 'redirectUri', redirectUri)
            const localVarPath = `/generic/user/oidc/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get logged in user
         * @param {string} [actionToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (actionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/generic/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required

            if (actionToken !== undefined) {
                localVarQueryParameter['actionToken'] = actionToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout the logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/generic/user/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/generic/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update logged in user
         * @param {UpdateGenericUserDto} updateGenericUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (updateGenericUserDto: UpdateGenericUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateGenericUserDto' is not null or undefined
            assertParamExists('update', 'updateGenericUserDto', updateGenericUserDto)
            const localVarPath = `/generic/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGenericUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update logged in user
         * @param {UserAddressUpdateDto} userAddressUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress: async (userAddressUpdateDto: UserAddressUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAddressUpdateDto' is not null or undefined
            assertParamExists('updateAddress', 'userAddressUpdateDto', userAddressUpdateDto)
            const localVarPath = `/generic/user/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAddressUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update logged in user
         * @param {UpdatePasswordUserDto} updatePasswordUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword: async (updatePasswordUserDto: UpdatePasswordUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePasswordUserDto' is not null or undefined
            assertParamExists('updatePassword', 'updatePasswordUserDto', updatePasswordUserDto)
            const localVarPath = `/generic/user/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePasswordUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if the user exists
         * @param {TestUserEmailDto} testUserEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userExists: async (testUserEmailDto: TestUserEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testUserEmailDto' is not null or undefined
            assertParamExists('userExists', 'testUserEmailDto', testUserEmailDto)
            const localVarPath = `/generic/user/exists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testUserEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the authorization request URL
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizationRequestOidc(redirectUri: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UrlDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizationRequestOidc(redirectUri, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get logged in user
         * @param {string} [actionToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(actionToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(actionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Logout the logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update logged in user
         * @param {UpdateGenericUserDto} updateGenericUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(updateGenericUserDto: UpdateGenericUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(updateGenericUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update logged in user
         * @param {UserAddressUpdateDto} userAddressUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAddress(userAddressUpdateDto: UserAddressUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAddress(userAddressUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update logged in user
         * @param {UpdatePasswordUserDto} updatePasswordUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePassword(updatePasswordUserDto: UpdatePasswordUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePassword(updatePasswordUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check if the user exists
         * @param {TestUserEmailDto} testUserEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userExists(testUserEmailDto: TestUserEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLoginInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userExists(testUserEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the authorization request URL
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationRequestOidc(redirectUri: string, options?: any): AxiosPromise<UrlDto> {
            return localVarFp.authorizationRequestOidc(redirectUri, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get logged in user
         * @param {string} [actionToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(actionToken?: string, options?: any): AxiosPromise<UserResponseDto> {
            return localVarFp.getCurrentUser(actionToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout the logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(options?: any): AxiosPromise<void> {
            return localVarFp.remove(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update logged in user
         * @param {UpdateGenericUserDto} updateGenericUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(updateGenericUserDto: UpdateGenericUserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.update(updateGenericUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update logged in user
         * @param {UserAddressUpdateDto} userAddressUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(userAddressUpdateDto: UserAddressUpdateDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.updateAddress(userAddressUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update logged in user
         * @param {UpdatePasswordUserDto} updatePasswordUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword(updatePasswordUserDto: UpdatePasswordUserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.updatePassword(updatePasswordUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if the user exists
         * @param {TestUserEmailDto} testUserEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userExists(testUserEmailDto: TestUserEmailDto, options?: any): AxiosPromise<UserLoginInfoDto> {
            return localVarFp.userExists(testUserEmailDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Get the authorization request URL
     * @param {string} redirectUri 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public authorizationRequestOidc(redirectUri: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).authorizationRequestOidc(redirectUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get logged in user
     * @param {string} [actionToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getCurrentUser(actionToken?: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getCurrentUser(actionToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout the logged in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public logout(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete logged in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public remove(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).remove(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update logged in user
     * @param {UpdateGenericUserDto} updateGenericUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public update(updateGenericUserDto: UpdateGenericUserDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).update(updateGenericUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update logged in user
     * @param {UserAddressUpdateDto} userAddressUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateAddress(userAddressUpdateDto: UserAddressUpdateDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateAddress(userAddressUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update logged in user
     * @param {UpdatePasswordUserDto} updatePasswordUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updatePassword(updatePasswordUserDto: UpdatePasswordUserDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updatePassword(updatePasswordUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check if the user exists
     * @param {TestUserEmailDto} testUserEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userExists(testUserEmailDto: TestUserEmailDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userExists(testUserEmailDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VerificationApi - axios parameter creator
 * @export
 */
export const VerificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Send email OTP to verify email
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerificationEmailOtp: async (verifyEmailDto: VerifyEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmailDto' is not null or undefined
            assertParamExists('sendVerificationEmailOtp', 'verifyEmailDto', verifyEmailDto)
            const localVarPath = `/generic/verification/otp/email/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send SMS OTP to verify the phone
         * @param {VerifyPhoneDto} verifyPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerificationSmsOtp: async (verifyPhoneDto: VerifyPhoneDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyPhoneDto' is not null or undefined
            assertParamExists('sendVerificationSmsOtp', 'verifyPhoneDto', verifyPhoneDto)
            const localVarPath = `/generic/verification/otp/sms/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyPhoneDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify the email OTP
         * @param {VerifyEmailOtpDto} verifyEmailOtpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmailOtp: async (verifyEmailOtpDto: VerifyEmailOtpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmailOtpDto' is not null or undefined
            assertParamExists('verifyEmailOtp', 'verifyEmailOtpDto', verifyEmailOtpDto)
            const localVarPath = `/generic/verification/otp/email/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailOtpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify the SMS OTP
         * @param {VerifyPhoneOtpDto} verifyPhoneOtpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySmsOtp: async (verifyPhoneOtpDto: VerifyPhoneOtpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyPhoneOtpDto' is not null or undefined
            assertParamExists('verifySmsOtp', 'verifyPhoneOtpDto', verifyPhoneOtpDto)
            const localVarPath = `/generic/verification/otp/sms/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyPhoneOtpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationApi - functional programming interface
 * @export
 */
export const VerificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Send email OTP to verify email
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendVerificationEmailOtp(verifyEmailDto: VerifyEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageSentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendVerificationEmailOtp(verifyEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send SMS OTP to verify the phone
         * @param {VerifyPhoneDto} verifyPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendVerificationSmsOtp(verifyPhoneDto: VerifyPhoneDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageSentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendVerificationSmsOtp(verifyPhoneDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verify the email OTP
         * @param {VerifyEmailOtpDto} verifyEmailOtpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmailOtp(verifyEmailOtpDto: VerifyEmailOtpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OtpResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmailOtp(verifyEmailOtpDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verify the SMS OTP
         * @param {VerifyPhoneOtpDto} verifyPhoneOtpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifySmsOtp(verifyPhoneOtpDto: VerifyPhoneOtpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OtpResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifySmsOtp(verifyPhoneOtpDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerificationApi - factory interface
 * @export
 */
export const VerificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationApiFp(configuration)
    return {
        /**
         * 
         * @summary Send email OTP to verify email
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerificationEmailOtp(verifyEmailDto: VerifyEmailDto, options?: any): AxiosPromise<MessageSentDto> {
            return localVarFp.sendVerificationEmailOtp(verifyEmailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send SMS OTP to verify the phone
         * @param {VerifyPhoneDto} verifyPhoneDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerificationSmsOtp(verifyPhoneDto: VerifyPhoneDto, options?: any): AxiosPromise<MessageSentDto> {
            return localVarFp.sendVerificationSmsOtp(verifyPhoneDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify the email OTP
         * @param {VerifyEmailOtpDto} verifyEmailOtpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmailOtp(verifyEmailOtpDto: VerifyEmailOtpDto, options?: any): AxiosPromise<OtpResponseDto> {
            return localVarFp.verifyEmailOtp(verifyEmailOtpDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify the SMS OTP
         * @param {VerifyPhoneOtpDto} verifyPhoneOtpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySmsOtp(verifyPhoneOtpDto: VerifyPhoneOtpDto, options?: any): AxiosPromise<OtpResponseDto> {
            return localVarFp.verifySmsOtp(verifyPhoneOtpDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
export class VerificationApi extends BaseAPI {
    /**
     * 
     * @summary Send email OTP to verify email
     * @param {VerifyEmailDto} verifyEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public sendVerificationEmailOtp(verifyEmailDto: VerifyEmailDto, options?: AxiosRequestConfig) {
        return VerificationApiFp(this.configuration).sendVerificationEmailOtp(verifyEmailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send SMS OTP to verify the phone
     * @param {VerifyPhoneDto} verifyPhoneDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public sendVerificationSmsOtp(verifyPhoneDto: VerifyPhoneDto, options?: AxiosRequestConfig) {
        return VerificationApiFp(this.configuration).sendVerificationSmsOtp(verifyPhoneDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify the email OTP
     * @param {VerifyEmailOtpDto} verifyEmailOtpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public verifyEmailOtp(verifyEmailOtpDto: VerifyEmailOtpDto, options?: AxiosRequestConfig) {
        return VerificationApiFp(this.configuration).verifyEmailOtp(verifyEmailOtpDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify the SMS OTP
     * @param {VerifyPhoneOtpDto} verifyPhoneOtpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public verifySmsOtp(verifyPhoneOtpDto: VerifyPhoneOtpDto, options?: AxiosRequestConfig) {
        return VerificationApiFp(this.configuration).verifySmsOtp(verifyPhoneOtpDto, options).then((request) => request(this.axios, this.basePath));
    }
}


